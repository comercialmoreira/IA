import tempfile
from urllib.parse import urlparse, parse_qs
import streamlit as st
from langchain.memory import ConversationBufferMemory

from langchain_groq import ChatGroq
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate

from Loaders import *


groq = st.secrets["GROQ_API_KEY"]

TIPOS_ARQUIVOS_VALIDOS = [
    'Chat', 'Analisador de Site', 'Analizador de Youtube', 'Analisador de Pdf', 'Analisador de CSV', 'Analisador de Texto'
]

CONFIG_MODELOS = {'Groq': 
                        {'modelos': ['llama-3.1-70b-versatile', 'gemma2-9b-it', 'mixtral-8x7b-32768'],
                         'chat': ChatGroq,
                         'api_key': groq}
}


MEMORIA = ConversationBufferMemory()

def carrega_arquivos(tipo_arquivo, arquivo):
    if tipo_arquivo == 'Chat':
        documento = carrega_site(arquivo)
    if tipo_arquivo == 'Analisador de Site':
        documento = carrega_site(arquivo)
    if tipo_arquivo == 'Analizador de Youtube':
        documento = carrega_youtube(arquivo)
    if tipo_arquivo == 'Analisador de Pdf':
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp:
            temp.write(arquivo.read())
            nome_temp = temp.name
        documento = carrega_pdf(nome_temp)
    if tipo_arquivo == 'Analisador de CSV':
        with tempfile.NamedTemporaryFile(suffix='.csv', delete=False) as temp:
            temp.write(arquivo.read())
            nome_temp = temp.name
        documento = carrega_csv(nome_temp)
    if tipo_arquivo == 'Analisador de Texto':
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as temp:
            temp.write(arquivo.read())
            nome_temp = temp.name
        documento = carrega_txt(nome_temp)
    return documento

def carrega_modelo(provedor, modelo, api_key, tipo_arquivo, arquivo):

    documento = carrega_arquivos(tipo_arquivo, arquivo)

    system_message = ''' Voc√™ √© um assistente avan√ßado chamado Or√°culo, especializado em oferecer suporte altamente qualificado e personalizado. 

    **Seu papel inicial:** Apresente as √°reas de especializa√ß√£o que voc√™ pode assumir. As op√ß√µes dispon√≠veis s√£o:
    - **Assistente de Copywriter**: Especialista em estrat√©gias de reda√ß√£o criativa, persuasiva e t√©cnica.
    - **Assistente de Marketing**: Consultor em estrat√©gias de marketing digital, campanhas e an√°lises de p√∫blico.
    - **Assistente de Gest√£o de Conte√∫do**: Planejador de conte√∫do otimizado para SEO, gest√£o de cronogramas e engajamento.
    - **Assistente de Vendas**: Facilitador de estrat√©gias de vendas, prospec√ß√£o e convers√£o de leads.
    - **Assistente de Suporte**: Especialista em atendimento ao cliente e solu√ß√£o de problemas t√©cnicos.

    **Responsabilidades ao assumir uma √°rea:**
    - Ao ser selecionado, aja como um especialista absoluto na fun√ß√£o escolhida.
    - Fa√ßa perguntas detalhadas e pertinentes para entender o objetivo do usu√°rio e oferecer solu√ß√µes personalizadas.
    - Use as informa√ß√µes fornecidas pelo usu√°rio e os dados carregados nos documentos para oferecer insights e estrat√©gias alinhadas ao contexto.
    

    Voc√™ possui acesso √†s seguintes informa√ß√µes do documento carregado {}:
    
    ###
    {}
    ###

    **Orienta√ß√µes adicionais para suas respostas:**
    - Sempre baseie suas intera√ß√µes nas informa√ß√µes do documento carregado, garantindo precis√£o e relev√¢ncia.
    - Caso o documento contenha mensagens gen√©ricas ou t√©cnicas como "Just a moment...Enable JavaScript and cookies to continue", oriente o usu√°rio a recarregar o assistente com um arquivo v√°lido.
    - Evite ambiguidades: pergunte tudo que for necess√°rio para entender o objetivo do usu√°rio antes de sugerir solu√ß√µes.
    - Sempre que houver "$" na sa√≠da, substitua-o por "S".
    - Se a informa√ß√£o do documento for algo como "Just a moment...Enable JavaScript and cookies to continue", sugira ao usu√°rio carregar novamente o Assistente.

    Instru√ß√µes de comportamento formata√ß√£o e estilo:

        1. Use **negrito** para dar mais significado a palavras-chave.
        2. Utilize as informa√ß√µes fornecidas para basear as suas respostas.
        3. Utilize as informa√ß√µes fornecidas para basear as suas respostas. E retorne respostas completas, n√£o apenas resumos.
        4. Use markdown para formatar sua resposta.
        5. Utilize cabe√ßalhos (##, ###) para organizar as informa√ß√µes em se√ß√µes.
        6. Use listas com marcadores (-) ou numeradas (1., 2., 3.) para apresentar pontos importantes.
        7. Destaque palavras-chave ou frases importantes usando **negrito**.
        8. Utilize *it√°lico* para √™nfase adicional quando apropriado.
        9. Se relevante, inclua cita√ß√µes usando o formato de bloco (>).
        10. Para informa√ß√µes t√©cnicas ou c√≥digos, use blocos de c√≥digo com ``` .
        11. Crie tabelas quando apropriado para apresentar dados de forma organizada.
        12. Use emojis üéØ ocasionalmente para adicionar um toque visual, mas n√£o exagere.
        13. Conclua sua resposta com um breve resumo ou chamada para a√ß√£o.
        14. Ocasionalmente, utilise cores em palavras chaves para deixar a resposta mais leg√≠vel.

    **Objetivo final:** Ser o mais efetivo, amig√°vel e proativo poss√≠vel em cada fun√ß√£o. Identifique lacunas de informa√ß√£o e antecipe necessidades com perguntas inteligentes.'''.format(tipo_arquivo, documento)

    

    template = ChatPromptTemplate.from_messages([
        ('system', system_message),
        ('placeholder', '{chat_history}'),
        ('user', '{input}')
    ])
    chat = CONFIG_MODELOS[provedor]['chat'](model=modelo, api_key=api_key)
    chain = template | chat

    st.session_state['chain'] = chain

def pagina_chat():
    st.header('"Nome da sua empresa" :violet[Assistant]', divider='violet')

    chain = st.session_state.get('chain')
    if chain is None:
        st.error('Carrege o assistente na sidebar antes de usar o chat')
        st.stop()

    memoria = st.session_state.get('memoria', MEMORIA)
    for mensagem in memoria.buffer_as_messages:
        chat = st.chat_message(mensagem.type)
        chat.markdown(mensagem.content)

    input_usuario = st.chat_input('Digite para o seu assistente')
    if input_usuario:
        chat = st.chat_message('human')
        chat.markdown(input_usuario)

        chat = st.chat_message('ai')
        resposta = chat.write_stream(chain.stream({
            'input': input_usuario, 
            'chat_history': memoria.buffer_as_messages
            }))
        
        memoria.chat_memory.add_user_message(input_usuario)
        memoria.chat_memory.add_ai_message(resposta)
        st.session_state['memoria'] = memoria

def sidebar():
    tabs = st.tabs(['Upload de Arquivos', 'Sele√ß√£o de Modelos'])
    with tabs[0]:
        tipo_arquivo = st.selectbox('Selecione o tipo de arquivo', TIPOS_ARQUIVOS_VALIDOS)
        if tipo_arquivo == 'Analisador de Site':
            arquivo = st.text_input('Digite a url do site')
        if tipo_arquivo == 'Analisador de Youtube':
            arquivo = st.text_input('Digite a url do v√≠deo')
        if tipo_arquivo == 'Analisador de Pdf':
            arquivo = st.file_uploader('Fa√ßa o upload do arquivo pdf', type=['.pdf'])
        if tipo_arquivo == 'Analisador de CSV':
            arquivo = st.file_uploader('Fa√ßa o upload do arquivo csv', type=['.csv'])
        if tipo_arquivo == 'Analisador de Texto':
            arquivo = st.file_uploader('Fa√ßa o upload do arquivo txt', type=['.txt'])
        if tipo_arquivo == 'Chat':
            arquivo = "https://firstbrazil.com.br"
        if tipo_arquivo == 'Analisador de Imagem':
            arquivo = st.file_uploader('Fa√ßa o upload do arquivo png', type=['.png'])

    with tabs[1]:
        provedor = st.selectbox('Selecione o provedor dos modelo', CONFIG_MODELOS.keys())
        modelo = st.selectbox('Selecione o modelo', CONFIG_MODELOS[provedor]['modelos'])
        api_key = CONFIG_MODELOS[provedor]['api_key']
        
    if st.button('Inicializar Assistente', use_container_width=True):
            carrega_modelo(provedor, modelo, api_key, tipo_arquivo, arquivo)
    if st.button('Apagar Hist√≥rico de Conversa', use_container_width=True):
            st.session_state['memoria'] = MEMORIA

def main():
    with st.sidebar:
        sidebar()
    pagina_chat()


if __name__ == '__main__':
    main()
